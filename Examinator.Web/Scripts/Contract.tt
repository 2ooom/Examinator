<#@ template debug="false" hostspecific="True" language="C#" #>
<#@ assembly name="TypeLite.dll" #>
<#@ assembly name="TypeLite.Net4.dll" #>
<#@ assembly name="Newtonsoft.Json.dll" #>
<#@ assembly name="System" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Reflection" #>
<#@ import namespace="TypeLite" #> 
<#@ import namespace="TypeLite.TsModels" #> 
<#@ import namespace="TypeLite.Net4" #> 
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@output extension=".ts"#>
<#
	var ts = TypeScript.Definitions()
		//.WithFormatter((TsTypeFormatter)FormatTypeName)
		.WithVisibility((types) => true);
	
	var contractDllParams = new [] {
		"Examinator.Contract"
	};
	var classDecoratorType = typeof(TsClassAttribute);
	var enumDecoratorType = typeof(TsEnumAttribute);
	foreach(var contact in contractDllParams) {
		var contractPath = Host.ResolveParameterValue("directive","processor", contact);
		var assembly = Assembly.Load(File.ReadAllBytes(contractPath));
		var types = assembly.GetTypes().Where(t => !t.IsInterface);
		var marked = types.Where(t => 
			t.CustomAttributes.Any(a => 
			a.AttributeType == classDecoratorType ||
			a.AttributeType == enumDecoratorType));
		if(marked.Any()) {
			foreach(var t in marked){
				ts.For(t);
            }
        } else {
			foreach(var t in types){
				ts.For(t);
            }
        }
    }
#>
<#= ts.Generate(TsGeneratorOutput.Enums) #>
<#= ts.Generate(TsGeneratorOutput.Properties) #>
<#+
Dictionary<string, string> _renamedModules = new Dictionary<string, string>();

string FormatTypeName(TsType type, ITsTypeFormatter formatter) {
	if(type.ClrType.IsInterface) {
		return ((TypeLite.TsModels.TsClass)type).Name;
	}
	return "I" + ((TypeLite.TsModels.TsClass)type).Name;
}
#>